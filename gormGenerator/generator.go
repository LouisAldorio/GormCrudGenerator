package gormgenerator

import (
	"fmt"
	"os"

	//Comment m
	"github.com/dave/jennifer/jen"
	"github.com/iancoleman/strcase"
)

//GormGenerator Gorm Generator
func GormGenerator(nameGoMod string, nameStruct string, attribute map[string][]string) error {

	structName := nameStruct
	goModName := nameGoMod

	camelStructName := strcase.ToLowerCamel(structName)
	snakeStructName := strcase.ToSnake(structName)

	attributeMap := make(map[string][]string)
	attributeMap = attribute

	f := jen.NewFile("main")

	f.Comment("//Generated By github.com/davidyap2002/GormCrudGenerator")

	f.Empty()

	//Create
	f.Comment("//" + structName + "Create Create")
	f.Func().Id(structName+"Create").Params(
		jen.Id("ctx").Qual("context", "Context"),
		jen.Id("input").Qual(goModName+"/model", "New"+structName),
	).Params(jen.Id("*").Qual(goModName+"/model", structName), jen.Error()).
		Block(
			jen.Id("db").Op(":=").Qual(goModName+"/config", "ConnectDB").Call(),
			jen.Defer().Id("db").Dot("Close").Call(),

			jen.Empty(),

			jen.Id(camelStructName).Op(":=").Qual(goModName+"/model", structName).Values(
				jen.DictFunc(func(d jen.Dict) {
					for _, val := range attributeMap[structName] {
						if val == "ID" {
							continue
						}
						d[jen.Id(val)] = jen.Id("input").Dot(val)
					}
				}),
			),

			jen.Empty(),

			jen.Id("err").Op(":=").Id("db").Dot("Table").Params(jen.Lit(snakeStructName)).Dot("Create").Params(jen.Id("&"+camelStructName)).Dot("Error"),

			jen.Empty(),

			jen.If(
				jen.Id("err").Op("!=").Nil(),
			).Block(
				jen.Qual("fmt", "Println").Call(jen.Id("err")),
				jen.Return(jen.Nil(), jen.Id("err")),
			),

			jen.Empty(),

			jen.Return(jen.Id("&"+camelStructName), jen.Nil()),
		)

	f.Comment("//" + structName + "Update Update")
	f.Func().Id(structName+"Update").Params(
		jen.Id("ctx").Qual("context", "Context"),
		jen.Id("input").Qual(goModName+"/model", "Update"+structName),
	).Params(jen.Id("*").Qual(goModName+"/model", structName), jen.Error()).
		Block(
			jen.Id("db").Op(":=").Qual(goModName+"/config", "ConnectDB").Call(),
			jen.Defer().Id("db").Dot("Close").Call(),

			jen.Empty(),

			jen.Id(camelStructName).Op(":=").Qual(goModName+"/model", structName).Values(
				jen.DictFunc(func(d jen.Dict) {
					for _, val := range attributeMap[structName] {
						d[jen.Id(val)] = jen.Id("input").Dot(val)
					}
				}),
			),

			jen.Empty(),

			jen.Id("err").Op(":=").Id("db").Dot("Table").Params(jen.Lit(snakeStructName)).Dot("Where").Params(jen.Lit("id = ?"), jen.Id("input.ID")).Dot("Updates").Params(jen.Id("&"+camelStructName)).Dot("Error"),

			jen.Empty(),

			jen.If(
				jen.Id("err").Op("!=").Nil(),
			).Block(
				jen.Qual("fmt", "Println").Call(jen.Id("err")),
				jen.Return(jen.Nil(), jen.Id("err")),
			),

			jen.Empty(),

			jen.Return(jen.Id("&"+camelStructName), jen.Nil()),
		)

	f.Comment("//" + structName + "Delete Delete")
	f.Func().Id(structName+"Delete").Params(
		jen.Id("ctx").Qual("context", "Context"),
		jen.Id("id").Int(),
	).Params(jen.String(), jen.Error()).
		Block(
			jen.Id("db").Op(":=").Qual(goModName+"/config", "ConnectDB").Call(),
			jen.Defer().Id("db").Dot("Close").Call(),

			jen.Empty(),

			jen.Id("err").Op(":=").Id("db").Dot("Table").Params(jen.Lit(snakeStructName)).Dot("Where").Params(jen.Lit("id = ?"), jen.Id("id")).Dot("Delete").Params(jen.Id("&model."+camelStructName+"{}")).Dot("Error"),

			jen.Empty(),

			jen.If(
				jen.Id("err").Op("!=").Nil(),
			).Block(
				jen.Qual("fmt", "Println").Call(jen.Id("err")),
				jen.Return(jen.Lit("Fail"), jen.Id("err")),
			),

			jen.Empty(),

			jen.Return(jen.Lit("Success"), jen.Nil()),
		)

	f.Comment("//" + structName + "GetByID Get By ID")
	f.Func().Id(structName+"GetByID").Params(
		jen.Id("ctx").Qual("context", "Context"),
		jen.Id("id").Int(),
	).Params(jen.Id("*").Qual(goModName+"/model", structName), jen.Error()).
		Block(
			jen.Id("db").Op(":=").Qual(goModName+"/config", "ConnectDB").Call(),
			jen.Defer().Id("db").Dot("Close").Call(),

			jen.Empty(),

			jen.Var().Id(camelStructName).Qual(goModName+"/model", structName),

			jen.Empty(),

			jen.Id("err").Op(":=").Id("db").Dot("Table").Params(jen.Lit(snakeStructName)).Dot("Where").Params(jen.Lit("id = ?"), jen.Id("id")).Dot("First").Params(jen.Id("&"+camelStructName)).Dot("Error"),

			jen.Empty(),

			jen.If(
				jen.Id("err").Op("!=").Nil(),
			).Block(
				jen.Qual("fmt", "Println").Call(jen.Id("err")),
				jen.Return(jen.Nil(), jen.Id("err")),
			),

			jen.Empty(),

			jen.Return(jen.Id("&"+camelStructName), jen.Nil()),
		)

	f.Comment("//" + structName + "GetAll GetAll")
	f.Func().Id(structName+"GetAll").Params(
		jen.Id("ctx").Qual("context", "Context"),
		jen.Id("id").Int(),
	).Params(jen.Id("[]*").Qual(goModName+"/model", structName), jen.Error()).
		Block(
			jen.Id("db").Op(":=").Qual(goModName+"/config", "ConnectDB").Call(),
			jen.Defer().Id("db").Dot("Close").Call(),

			jen.Empty(),

			jen.Var().Id(camelStructName).Id("[]*").Qual(goModName+"/model", structName),

			jen.Empty(),

			jen.Id("err").Op(":=").Id("db").Dot("Table").Params(jen.Lit(snakeStructName)).Dot("Find").Params(jen.Id("&"+camelStructName)).Dot("Error"),

			jen.Empty(),

			jen.If(
				jen.Id("err").Op("!=").Nil(),
			).Block(
				jen.Qual("fmt", "Println").Call(jen.Id("err")),
				jen.Return(jen.Nil(), jen.Id("err")),
			),

			jen.Empty(),

			jen.Return(jen.Id(camelStructName), jen.Nil()),
		)

	file, err := os.Create("./service/" + camelStructName + ".go")

	if err != nil {
		return err
	}

	_, err = file.WriteString(fmt.Sprintf("%#v", f))

	if err != nil {
		return err
	}

	return nil

}
